// PV3 Platform - Complete Prisma Schema
// Shared between Backend (Railway) and Frontend (Vercel)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User Model
model User {
  id        String   @id @default(cuid())
  wallet    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile information
  username  String?
  avatar    String?
  email     String?
  
  // Stats
  totalEarnings Float   @default(0)
  totalMatches  Int     @default(0)
  wins          Int     @default(0)
  losses        Int     @default(0)
  winRate       Float   @default(0)
  
  // Reputation & Achievements
  reputation    Int     @default(1000)
  achievements  Json?
  badges        Json?
  
  // Preferences
  preferences   Json?
  
  // Relationships
  matches1      Match[] @relation("Player1")
  matches2      Match[] @relation("Player2")
  tournaments   TournamentParticipant[]
  referrals     Referral[] @relation("Referrer")
  referred      Referral[] @relation("Referred")
  
  // Performance indexes
  @@index([totalEarnings(sort: Desc)])
  @@index([wins(sort: Desc)])
  @@index([winRate(sort: Desc)])
  @@index([reputation(sort: Desc)])
  @@index([createdAt])
  @@map("users")
}

// Match System
model Match {
  id        String   @id @default(cuid())
  gameType  String
  wager     Float
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  startedAt DateTime?
  endedAt   DateTime?
  
  // Players
  player1Id String
  player2Id String?
  winnerId  String?
  
  // Game data
  gameData  Json?
  result    Json?
  signature String?
  
  // Solana integration
  escrowAddress String?
  transactionId String?
  
  player1   User @relation("Player1", fields: [player1Id], references: [id])
  player2   User? @relation("Player2", fields: [player2Id], references: [id])
  
  // Performance indexes
  @@index([status])
  @@index([gameType])
  @@index([createdAt(sort: Desc)])
  @@index([player1Id])
  @@index([player2Id])
  @@index([wager(sort: Desc)])
  @@map("matches")
}

// Tournament System
model Tournament {
  id          String   @id @default(cuid())
  name        String
  description String?
  prizePool   Float
  status      String   @default("upcoming")
  maxPlayers  Int
  currentPlayers Int   @default(0)
  createdAt   DateTime @default(now())
  startsAt    DateTime
  endsAt      DateTime?
  
  // Tournament configuration
  gameType    String
  entryFee    Float
  format      String   @default("single_elimination")
  rules       Json?
  
  participants TournamentParticipant[]
  
  // Performance indexes
  @@index([status])
  @@index([gameType])
  @@index([startsAt])
  @@index([prizePool(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@map("tournaments")
}

model TournamentParticipant {
  id           String @id @default(cuid())
  tournamentId String
  userId       String
  joinedAt     DateTime @default(now())
  eliminated   Boolean  @default(false)
  placement    Int?
  
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  
  @@unique([tournamentId, userId])
  @@index([tournamentId])
  @@index([userId])
  @@map("tournament_participants")
}

// Referral System
model Referral {
  id         String   @id @default(cuid())
  code       String   @unique
  referrerId String
  referredId String?
  createdAt  DateTime @default(now())
  claimedAt  DateTime?
  
  // Rewards
  totalEarnings Float @default(0)
  totalRewards  Float @default(0)
  
  referrer   User @relation("Referrer", fields: [referrerId], references: [id])
  referred   User? @relation("Referred", fields: [referredId], references: [id])
  
  // Performance indexes
  @@index([referrerId])
  @@index([totalEarnings(sort: Desc)])
  @@index([createdAt])
  @@map("referrals")
}

// Leaderboards
model Leaderboard {
  id        String   @id @default(cuid())
  type      String   // "earnings", "wins", "winrate"
  period    String   // "daily", "weekly", "monthly", "alltime"
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([type, period])
  @@index([type])
  @@index([period])
  @@index([updatedAt])
  @@map("leaderboards")
}

// Security & Audit
model SecurityLog {
  id        String   @id @default(cuid())
  userId    String?
  type      String
  action    String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  // Performance indexes
  @@index([userId])
  @@index([type])
  @@index([createdAt(sort: Desc)])
  @@index([ipAddress])
  @@map("security_logs")
}

model AuditLog {
  id         String   @id @default(cuid())
  adminId    String?
  action     String
  targetType String?
  targetId   String?
  details    Json?
  createdAt  DateTime @default(now())
  
  // Performance indexes
  @@index([adminId])
  @@index([action])
  @@index([targetType])
  @@index([createdAt(sort: Desc)])
  @@map("audit_logs")
}

// Analytics
model Analytics {
  id        String   @id @default(cuid())
  type      String
  period    String   // "hourly", "daily", "weekly"
  data      Json
  createdAt DateTime @default(now())
  
  @@unique([type, period, createdAt])
  @@index([type])
  @@index([period])
  @@index([createdAt(sort: Desc)])
  @@map("analytics")
} 