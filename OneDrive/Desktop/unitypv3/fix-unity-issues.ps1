# Fix Unity Import Issues Script
# This script addresses common Unity project issues

Write-Host "Fixing Unity Import Issues..." -ForegroundColor Green

$projectPath = ".\BoatAttack\BoatAttack"

# Navigate to project directory
Push-Location $projectPath

try {
    # 1. Remove Library folder to force Unity to reimport everything
    Write-Host "Removing Library folder..." -ForegroundColor Yellow
    if (Test-Path "Library") {
        Remove-Item -Path "Library" -Recurse -Force
        Write-Host "✓ Library folder removed" -ForegroundColor Green
    }

    # 2. Remove Temp folder
    Write-Host "Removing Temp folder..." -ForegroundColor Yellow
    if (Test-Path "Temp") {
        Remove-Item -Path "Temp" -Recurse -Force
        Write-Host "✓ Temp folder removed" -ForegroundColor Green
    }

    # 3. Clear Unity cache
    Write-Host "Clearing Unity cache..." -ForegroundColor Yellow
    $unityCache = "$env:LOCALAPPDATA\Unity\cache"
    if (Test-Path $unityCache) {
        Remove-Item -Path "$unityCache\*" -Recurse -Force -ErrorAction SilentlyContinue
        Write-Host "✓ Unity cache cleared" -ForegroundColor Green
    }

    # 4. Fix line endings in all .cs files
    Write-Host "Fixing line endings in C# files..." -ForegroundColor Yellow
    $csFiles = Get-ChildItem -Path "Assets" -Filter "*.cs" -Recurse
    foreach ($file in $csFiles) {
        $content = Get-Content -Path $file.FullName -Raw
        if ($content -match "[\r\n]") {
            $content = $content -replace "`r`n", "`n" -replace "`r", "`n" -replace "`n", "`r`n"
            Set-Content -Path $file.FullName -Value $content -NoNewline
        }
    }
    Write-Host "✓ Line endings fixed" -ForegroundColor Green

    # 5. Find and remove orphaned .meta files
    Write-Host "Checking for orphaned .meta files..." -ForegroundColor Yellow
    $metaFiles = Get-ChildItem -Path "Assets" -Filter "*.meta" -Recurse
    $orphanedCount = 0
    
    foreach ($metaFile in $metaFiles) {
        $originalFile = $metaFile.FullName -replace "\.meta$", ""
        if (-not (Test-Path $originalFile)) {
            Write-Host "Removing orphaned meta file: $($metaFile.Name)" -ForegroundColor Red
            Remove-Item -Path $metaFile.FullName -Force
            $orphanedCount++
        }
    }
    
    if ($orphanedCount -eq 0) {
        Write-Host "✓ No orphaned meta files found" -ForegroundColor Green
    } else {
        Write-Host "✓ Removed $orphanedCount orphaned meta files" -ForegroundColor Green
    }

    # 6. Create .gitignore if it doesn't exist
    if (-not (Test-Path ".gitignore")) {
        Write-Host "Creating .gitignore file..." -ForegroundColor Yellow
        @"
# Unity generated files
[Ll]ibrary/
[Tt]emp/
[Oo]bj/
[Bb]uild/
[Bb]uilds/
[Ll]ogs/
[Uu]ser[Ss]ettings/

# MemoryCaptures can get excessive in size
/[Mm]emoryCaptures/

# Asset meta data should be kept
!/[Aa]ssets/**/*.meta

# Uncomment this line if you wish to ignore the asset store tools plugin
# /[Aa]ssets/AssetStoreTools*

# Autogenerated Jetbrains Rider plugin
/[Aa]ssets/Plugins/Editor/JetBrains*

# Visual Studio cache directory
.vs/

# Gradle cache directory
.gradle/

# Autogenerated VS/MD/Consulo solution and project files
ExportedObj/
.consulo/
*.csproj
*.unityproj
*.sln
*.suo
*.tmp
*.user
*.userprefs
*.pidb
*.booproj
*.svd
*.pdb
*.mdb
*.opendb
*.VC.db

# Unity3D generated meta files
*.pidb.meta
*.pdb.meta
*.mdb.meta

# Unity3D generated file on crash reports
sysinfo.txt

# Builds
*.apk
*.aab
*.unitypackage
*.app

# Crashlytics generated file
crashlytics-build.properties

# Packed Addressables
/[Aa]ssets/[Aa]ddressable[Aa]ssets[Dd]ata/*/*.bin*

# Temporary auto-generated Android Assets
/[Aa]ssets/[Ss]treamingAssets/aa.meta
/[Aa]ssets/[Ss]treamingAssets/aa/*
"@ | Set-Content -Path ".gitignore"
        Write-Host "✓ .gitignore created" -ForegroundColor Green
    }

    Write-Host "`nAll fixes applied successfully!" -ForegroundColor Green
    Write-Host "You can now open Unity and it should reimport all assets properly." -ForegroundColor Cyan
    
} catch {
    Write-Host "Error occurred: $($_.Exception.Message)" -ForegroundColor Red
} finally {
    Pop-Location
}

Write-Host "`nPress any key to continue..." -ForegroundColor Yellow
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown") 